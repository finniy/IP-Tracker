import re
import telebot
from telebot.types import Message
from telebot import types
from phonenumbers.phonenumberutil import NumberParseException

from app.config import API_KEY
from app.check_valid_ip import is_valid_ip_first
from app.phone_tracker import *
from app.database import *
from app.text_for_bot import *
from app.ip_track import *

bot = telebot.TeleBot(API_KEY)

commands = [
    types.BotCommand('start', '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'),
    types.BotCommand('phone', '–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
    types.BotCommand('ip', '–ü—Ä–æ–±–∏–≤ –ø–æ IP-–∞–¥—Ä–µ—Å—É'),
    types.BotCommand('history', '–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤'),
    types.BotCommand('help', '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'),
    types.BotCommand('github', '–°—Å—ã–ª–∫–∞ –Ω–∞ GitHub –ø—Ä–æ–µ–∫—Ç–∞')
]


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/start'))
def start(message: Message) -> None:
    username = message.from_user.username
    print(f'[+] {username} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = types.KeyboardButton('/ip')
    button_2 = types.KeyboardButton('/phone')
    button_3 = types.KeyboardButton('/history')
    markup.add(button_1, button_2, button_3)

    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/help'))
def help(message: Message) -> None:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help ‚Äî –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/phone'))
def phone_message(message: Message) -> None:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /phone ‚Äî –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(message.chat.id, phone_start_text)
    bot.register_next_step_handler(message, phone_input_info)


def phone_input_info(message: Message) -> None:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏ –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    number = message.text.strip()
    number_re_check = re.fullmatch(r'\+\d{11}', number)

    try:
        parse_number = phonenumbers.parse(number)

        if phonenumbers.is_valid_number(parse_number) and number_re_check:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            user_id = str(message.from_user.id)
            username = message.from_user.username
            user_request = number
            add_info_in_database(user_id, username, user_request)
            print(f'[+] {username} –≤—ã–ø–æ–ª–Ω–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–º–µ—Ä–∞')

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            result_list_info = format_phone_info(phone_found(number))
            bot.send_message(message.chat.id, result_list_info)
        else:
            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            bot.send_message(message.chat.id, invalid_number_text)
            bot.register_next_step_handler(message, phone_input_info)

    except NumberParseException:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –Ω–æ–º–µ—Ä–∞
        bot.send_message(message.chat.id, invalid_number_text)
        bot.register_next_step_handler(message, phone_input_info)


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/ip'))
def ip_message(message: Message) -> None:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ip ‚Äî –∑–∞–ø—Ä–æ—Å IP-–∞–¥—Ä–µ—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(message.chat.id, ip_start_text)
    bot.register_next_step_handler(message, ip_input_info)


def ip_input_info(message: Message) -> None:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ IP-–∞–¥—Ä–µ—Å–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ + –∫–∞—Ä—Ç–∞
    ip_address = message.text.strip()

    if is_valid_ip_first(ip_address):
        ip_info, map_url = get_info_by_ip(ip_address)

        if isinstance(ip_info, dict) and map_url:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            user_id = str(message.from_user.id)
            username = message.from_user.username
            user_request = ip_address
            add_info_in_database(user_id, username, user_request)
            print(f'[+] {username} –≤—ã–ø–æ–ª–Ω–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É ip')

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∫–∞—Ä—Ç—ã
            ip_info = format_ip_info(ip_info)
            bot.send_message(message.chat.id, ip_info)
            send_map_photo(message, map_url)
        else:
            # –û—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω IP
            bot.send_message(message.chat.id, ip_info)
            bot.register_next_step_handler(message, ip_input_info)
    else:
        # –ù–µ–≤–µ—Ä–Ω—ã–π IP-–∞–¥—Ä–µ—Å
        bot.send_message(message.chat.id, invalid_ip_text)
        bot.register_next_step_handler(message, ip_input_info)


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/history'))
def send_user_history(message: Message) -> None:
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /history –∏ /HISTORY, –æ—Ç–ø—Ä–∞–≤–ª—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
    user_id = str(message.from_user.id)
    username = message.from_user.username

    lst_with_requests = format_user_requests(take_user_history(user_id), username)
    bot.send_message(message.chat.id, lst_with_requests)


def send_map_photo(message: Message, map_url: str) -> None:
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ IP
    bot.send_photo(message.chat.id, map_url, caption="üó∫Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP")


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/github'))
def send_my_github(message: Message) -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ GitHub –ø—Ä–æ–µ–∫—Ç–∞
    bot.send_message(message.chat.id, github_link_text)


def main():
    bot.set_my_commands(commands)
    bot.polling(none_stop=True)
